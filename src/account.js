import Head from "next/head";
import React, { useState, useEffect } from "react";
//import Image from "next/image";
import { init, useConnectWallet, useSetChain, useWallets } from "@web3-onboard/react";
import  axios from 'axios'

import { getBlockchain, isValidNetwork, getContactProvider } from "../utils/ethereum";

import { networks } from "../utils/Constant";

import { changeNetwork, getTokenByAddress } from "../utils/util";
import Web3 from "web3";
import { isMobile } from "react-device-detect";
import "react-bootstrap";
import "bootstrap/dist/css/bootstrap.css";
import styles from "../styles/Home.module.css";
import  initWeb3Onboard from '../service/initWeb3Onboard';



const Account = () => {
  const [{ wallet }, connect, disconnect] = useConnectWallet();
  const connectedWallets = useWallets();
  const [web3Onboard, setWeb3Onboard] = useState(null);
  const [loading, setLoading] = useState(false);
  const [accounts, setAccounts] = useState(undefined);


  useEffect(() => {
    setWeb3Onboard(initWeb3Onboard);
    //console.log("---wallet---", wallet);
  }, []);

  useEffect(() => {
    const init = async () => {
   try {
        const { airdrop, accounts = [] } = await getBlockchain(initWeb3Onboard);
        setAccounts(accounts[0]);
        setLoading(false);
      } catch (e) {
        //setLoadingMessage(e);
      }
      if (typeof window.ethereum !== "undefined") {
        // Existing code goes here

        window?.ethereum?.on("accountsChanged", function (accounts) {
          console.log(`Selected account changed to ${accounts[0]}`);
           setAccounts(accounts[0]);
        });

        window?.ethereum?.on("chainChanged", () => {
          //window.location.reload();
        });
        /*window.ethereum.on("accountsChanged", () => {
          window.location.reload();
        });*/
      }
    };
    init();
  }, []);

  useEffect(() => {
    if (!connectedWallets.length) return;

    const connectedWalletsLabelArray = connectedWallets.map(({ label }) => label);
    window.localStorage.setItem("connectedWallets", JSON.stringify(connectedWalletsLabelArray));
  }, [connectedWallets]);

  useEffect(() => {
    const setWalletFromLocalStorage = async (previouslyConnectedWallets)=> {
      let res = await connect({ autoSelect: previouslyConnectedWallets[0] });
      //console.log("----res--", res);
    }
    const previouslyConnectedWallets = JSON.parse(window.localStorage.getItem("connectedWallets"));
    if (previouslyConnectedWallets?.length) {
      setWalletFromLocalStorage(previouslyConnectedWallets);
    }
  }, [web3Onboard, connect]);


  const handleConnect = async (account) => {
    let wallets = await connect({});
    if (wallets && wallets[0]?.accounts) {
      setAccounts(wallets[0]?.accounts[0]?.address);
    }
    const { valid, message } = await isValidNetwork(isMobile);
    if (!valid) {
      /*setClaimMessage({
        type: "danger",
        payload: message,
      });*/
      return;
    }
  };

  const handleDisconnect = async () => {
    /*const [primaryWallet] = initWeb3Onboard.state.get().wallets
        let res = await initWeb3Onboard.disconnectWallet()
        console.log("----res----",res)
        setAccounts(null);*/
    await disconnect(wallet);
    const connectedWalletsList = connectedWallets.map(({ label }) => label);
    window.localStorage.setItem("connectedWallets", null);
    localStorage.clear();
  };

  return (
      <div className={styles.container}>
        <Head>
          <title>New - emax</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div className="App">
          <div id="some-element"></div>
          <div className="header">
            <div className="logo">
              <img src="/Logo.png" alt="logo" className="inner_logo" />
            </div>
            <div className="right_btn">
              <img src="/secound_logo.png" alt="" className="inner_logo" />
              <div className="inner_btn">
                {!wallet && (
                    <button
                        className="connect_btn"
                        onClick={() => {
                          handleConnect(accounts);
                        }}
                    >
                      <span>{accounts || "Connect Wallet"}</span>
                    </button>
                )}
                {wallet && (
                    <button
                        className="connect_btn"
                        onClick={() => {
                          handleDisconnect();
                        }}
                    >
                      Disconnect
                    </button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
  );
};

export default Account;
